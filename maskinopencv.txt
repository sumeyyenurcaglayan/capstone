import cv2
import numpy as np
import serial
import asyncio

color = ""


async def color_picker():
    global color
    
 #forVideo
    wc = cv2.VideoCapture(0)

    while(1):

                _, imgFrame =  wc.read()

                hsv = cv2.cvtColor(imgFrame, cv2.COLOR_BGR2HSV)
                
                #blue:
                blue_lower = np.array([100, 200, 100], np.uint8)
                blue_upper = np.array([130, 255, 255], np.uint8)
                blue_mask = cv2.inRange(hsv, blue_lower, blue_upper)
                
                #red:
                red_lower = np.array([0, 200, 90], np.uint8)
                red_upper = np.array([10, 250, 250], np.uint8)
                red_mask = cv2.inRange(hsv, red_lower, red_upper)
                
                #green:
                green_lower = np.array([50, 120, 110], np.uint8)
                green_upper = np.array([90, 250, 250], np.uint8)
                green_mask = cv2.inRange(hsv, green_lower, green_upper)
                
                #yellow:
                yellow_lower = np.array([25,200,50], np.uint8)
                yellow_upper = np.array([50,255,250], np.uint8)
                yellow_mask = cv2.inRange(hsv, yellow_lower, yellow_upper)
                
                #orange:    
                orange_lower = np.array([18,100,90], np.uint8)
                orange_upper = np.array([20,255,255], np.uint8)
                orange_mask = cv2.inRange(hsv, orange_lower, orange_upper)



                kernal = np.ones((5, 5), "uint8")

                # For blue color
                blue_mask = cv2.dilate(blue_mask, kernal)
                res_blue = cv2.bitwise_and(imgFrame, imgFrame, mask = blue_mask)
                
                # For red color
                red_mask = cv2.dilate(red_mask, kernal)
                res_red = cv2.bitwise_and(imgFrame, imgFrame, mask = red_mask)
                
                # For green color
                green_mask = cv2.dilate(green_mask, kernal)
                res_green = cv2.bitwise_and(imgFrame, imgFrame, mask = green_mask)
                
                # For yellow color
                yellow_mask = cv2.dilate(yellow_mask, kernal)
                res_yellow = cv2.bitwise_and(imgFrame, imgFrame, mask = yellow_mask)
                
                # For orange color
                orange_mask = cv2.dilate(orange_mask, kernal)
                res_orange = cv2.bitwise_and(imgFrame, imgFrame, mask = orange_mask)

                
                
            # Creating contour to track blue color
                contours, hierarchy = cv2.findContours(blue_mask, cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)[-2:]

                for pic, contour in enumerate(contours):
                    area = cv2.contourArea(contour)
                    if(area>500 ):
                        x, y, w, h = cv2.boundingRect(contour)    
                        imgFrame = cv2.rectangle(imgFrame, (x, y), (x + w, y + h), (255, 0, 0), 2)
                        cv2.putText(imgFrame, "Blue Color", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 0, 0))
                       
                        color = "a"
                        await asyncio.sleep(0.001) 


            # Creating contour to track red color
                contours, hierarchy = cv2.findContours(red_mask, cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)[-2:]
                
                for pic, contour in enumerate(contours):
                    area = cv2.contourArea(contour)
                    if(area>600):
                        x, y, w, h = cv2.boundingRect(contour)    
                        imgFrame = cv2.rectangle(imgFrame, (x, y), (x + w, y + h), (0,0,255), 2)
                        cv2.putText(imgFrame, "Red Color", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0,0,255))
                           
                        color = "b"
                        await asyncio.sleep(0.001) 
                    

            # Creating contour to track green color
                contours, hierarchy = cv2.findContours(green_mask, cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)[-2:]

                for pic, contour in enumerate(contours):
                    area = cv2.contourArea(contour)
                    if(area>600 ):
                        x, y, w, h = cv2.boundingRect(contour)    
                        imgFrame = cv2.rectangle(imgFrame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                        cv2.putText(imgFrame, "Green Color", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0))
                       
                        color = "c"
                        await asyncio.sleep(0.001) 


            # Creating contour to track yellow color
                contours, hierarchy = cv2.findContours(yellow_mask, cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)[-2:]
                
                for pic, contour in enumerate(contours):
                    area = cv2.contourArea(contour)
                    if(area>700 ):
                        x, y, w, h = cv2.boundingRect(contour)    
                        imgFrame = cv2.rectangle(imgFrame, (x, y), (x + w, y + h), (0,255,255), 2)
                        cv2.putText(imgFrame, "Yellow Color", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0,255,255))
                        
                        color = "e"
                        await asyncio.sleep(0.001) 


            # Creating contour to track orange color
                contours, hierarchy = cv2.findContours(orange_mask, cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)[-2:]

                for pic, contour in enumerate(contours):
                    area = cv2.contourArea(contour)
                    if(area>900 ):
                        x, y, w, h = cv2.boundingRect(contour)    
                        imgFrame = cv2.rectangle(imgFrame, (x, y), (x + w, y + h), (0,165,255), 2)
                        cv2.putText(imgFrame, "Orange Color", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0,165,255))
                        
                        color = "f"
                        await asyncio.sleep(0.001) 
            
            

                # Program Termination
                cv2.imshow("Multiple Color Detection in Real-TIme", imgFrame)
                if cv2.waitKey(10) & 0xFF == ord('q'):
                    cv2.destroyAllWindows()
                    wc.release()
                    break
    await asyncio.sleep(0.001) 
        

        
async def color_printer():

    global count
    global color
    delay = 0.46

    while True:

        if color == "a":
            ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
            ser.flush()
            ser.write(b"a\n")
            print("Blue Found")
            await asyncio.sleep(delay)
            
        if color == "b":
            ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
            ser.flush()
            ser.write(b"b\n")
            print("Red Found")
            await asyncio.sleep(delay)
            
        if color == "c":
            ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
            ser.flush()
            ser.write(b"c\n")
            print("Green Found")
            await asyncio.sleep(delay)
            
        if color == "e":
            ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
            ser.flush()
            ser.write(b"e\n")
            print("Yellow Found")
            await asyncio.sleep(delay)
            
        if color == "f":
            ser = serial.Serial('/dev/ttyACM1', 9600, timeout=1)
            ser.flush()
            ser.write(b"f\n")
            print("Orange Found")
            await asyncio.sleep(delay)
            
        else:
            color = ""
            
        await asyncio.sleep(0.001)
        
loop = asyncio.get_event_loop()

try:
    asyncio.ensure_future(color_picker())
    loop.run_until_complete(color_printer())
except KeyboardInterrupt:
    pass
finally:
    print("Closing the loop")
    loop.close()
    
